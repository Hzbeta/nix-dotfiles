"$schema"                 = "https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json"
version                   = 3
enable_cursor_positioning = true                                                                                  # Enable cursor position detection in bash/zsh
# for auto-hiding leading newlines at shell top

[var]
  Space = "\u2007" # Special space char, width 1, prevents OMP from treating
  # template as empty (needed for .Segments.Contains "PreGit")
  PathMaxWidthPercentWithGit    = 40
  PathMaxWidthPercentWithoutGit = 60

# Transient prompt config - simplified prompt for secondary lines
[transient_prompt]
  background = "transparent"
  foreground = "green"
  template   = "❯ "

# The order of the four sections must be: left to right, top to bottom.
# 1. Top left: Path + Git
# 1.1 This block is split into two: the first contains a PreGit segment
#     to detect if the current dir is a git repo.
#     Splitting ensures git detection runs before path segment,
#     as parallel execution otherwise makes
#     .Segments.Contains "PreGit" unreliable.
[[blocks]]
  type      = "prompt"
  alignment = "left"
  newline   = true     # Separates current prompt from historical transient_prompt.

  # Top-left corner and horizontal line
  [[blocks.segments]]
    type       = "text"
    style      = "plain"
    foreground = "darkGray"
    template   = "╭─"

  # Git – OMP computes repo status, but template is empty
  [[blocks.segments]]
    type  = "git"
    alias = "PreGit" # Alias to avoid confusion
    style = "plain"
    # Can't output nothing, as OMP treats empty segment as false,
    # making .Segments.Contains "PreGit" unusable. So we output
    # a special space char instead.
    template = "{{ .Var.Space }}" # Output special space
    [blocks.segments.properties]
      branch_icon = ""

# 1.2 This block contains the path and the actual git info segment
[[blocks]]
  type      = "prompt"
  alignment = "left"
  newline   = false

  # Current directory path segment
  [[blocks.segments]]
    type       = "path"
    style      = "plain"
    foreground = "cyan"
    # If PreGit didn't output special space, output it here
    # to ensure one space between `╭─` and `path` in all cases
    template = '{{ if not (.Segments.Contains "PreGit") }}{{ .Var.Space }}{{ end }}{{ .Path }} '
    [blocks.segments.properties]
      style     = "powerlevel"
      max_width = '{{ if .Segments.Contains "PreGit" }}{{ div (mul .Env.OH_MY_POSH_COLUMNS .Var.PathMaxWidthPercentWithGit) 100 }}{{ else }}{{ div (mul .Env.OH_MY_POSH_COLUMNS .Var.PathMaxWidthPercentWithoutGit) 100 }}{{ end }}'

  # Git information segment
  [[blocks.segments]]
    type       = "git"
    style      = "plain"
    foreground = "lightGreen"
    template   = "on {{ .HEAD }}{{ if and .BranchStatus (not .UpstreamGone) }} {{ .BranchStatus }}{{ end }} "
    [blocks.segments.properties]
      branch_icon = " "

# 2. Top right: Environment info + top-right arc
[[blocks]]
  type      = "prompt"
  alignment = "right"

  # Status code - shows error code when command fails
  [[blocks.segments]]
    type       = "status"
    style      = "plain"
    foreground = "lightRed"
    template   = " {{ if ne .Code 0 }}✘ {{ .String  }}{{ end }} "

  # Python environment info
  [[blocks.segments]]
    type       = "python"
    style      = "plain"
    foreground = "#FFE873"
    template   = "{{ if not .Error }} {{ if .Venv }}{{ .Venv }}{{ end }}{{ end }} "
    [blocks.segments.properties]
      display_mode = "environment"

  # Command execution time
  [[blocks.segments]]
    type       = "executiontime"
    style      = "plain"
    foreground = "yellow"
    template   = "󰔟 {{ .FormattedMs }} "
    [blocks.segments.properties]
      threshold = 1000     # Only show if execution time exceeds this value.
      style     = "austin"

  # Shell info
  [[blocks.segments]]
    type       = "shell"
    style      = "plain"
    foreground = "cyan"
    template   = " {{ .Name }} "

  # Top-right corner and horizontal line
  [[blocks.segments]]
    type       = "text"
    style      = "plain"
    foreground = "darkGray"
    template   = "─╮"

# 3. Bottom left: Prompt
[[blocks]]
  type      = "prompt"
  alignment = "left"
  newline   = true

  # Bottom-left corner
  [[blocks.segments]]
    type       = "text"
    style      = "plain"
    foreground = "darkGray"
    template   = "╰─"

  # Prompt symbol - color changes by status and root
  [[blocks.segments]]
    type = "text"
    style = "plain"
    foreground = "lightGreen"
    foreground_templates = [
      "{{ if ne .Code 0 }}lightRed{{ end }}", # Red if error
      "{{if .Root}} lightYellow {{ end }}",   # Yellow if root
    ]
    template = "{{ if .Root }} #{{ else }}❯{{ end }} "

# 4. Bottom right: Bottom-right arc, in rprompt block
[[blocks]]
  type = "rprompt"

  # Bottom-right corner
  [[blocks.segments]]
    type       = "text"
    style      = "plain"
    foreground = "darkGray"
    template   = "─╯"
